 /* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "GUI.h"
#include <stdio.h>
#include <math.h> 
#include <time.h>
#include "log.h"

uint8_t aaa;
u8 event_SD;

RTC_TimeTypeDef stimestructureget;
RTC_DateTypeDef sdatestructureget;

uint16_t timeout_1, timeout_2, timeout_wifi;



extern UART_HandleTypeDef huart1, huart2, huart5;
extern RTC_HandleTypeDef RtcHandle;
extern const string WeekDayNames[];
extern const   uint8_t MonthNames[];
uint8_t need_set_time_date = 0;
uint8_t alarm_set = 0;
extern struct tm gps_time, gps_time2;
extern struct tm wifi_time;
extern uint16_t wifi_delay;
extern int delta_wifi;
extern uint8_t wifi_stat, wifi_valid_data;
//extern uint16_t CRC;

uint8_t show_time_flag=0;
uint8_t psim_ok=0, psim_ok2, psim_count=0, psim_fail=0;
extern int16_t CALM;
extern uint32_t CALP;
extern uint32_t T;
extern uint8_t synchro_rtc;
volatile extern uint8_t rtc_calib_ok, need_rtc_calib;
extern  time_t current_ttime, ttime_to_calib;
extern struct tm current_gps_time;
volatile extern char time_set, date_set, gps_valid;
volatile extern char time_set2, date_set2, gps_valid2;
extern int delta, old_delta, delta_ms, old_delta_ms;
extern time_t gps_t, gps_t2, wifi_t;
extern uint32_t pps1_time, pps2_time;
extern int diff_pps;
extern uint8_t WiFi_Buff[];

extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana16;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana23;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana32;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontSegment762;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana71;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana82;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana96;
extern GUI_CONST_STORAGE GUI_FONT GUI_FontVerdana45_rus;
extern GUI_CONST_STORAGE GUI_BITMAP bmGPS_WIFI;
extern GUI_CONST_STORAGE GUI_BITMAP bmgps_icon;
extern GUI_CONST_STORAGE GUI_BITMAP bmclock_icon;
extern GUI_CONST_STORAGE GUI_BITMAP bmwire_gps;
static uint8_t TempStr[50];


uint8_t log_flag=0;
log_t Log;

uint32_t adr_log = 0, records = 0; // свободный адрес и кол-во записей

volatile time_t ct = {0};

#define M_PI    (float)     3.14159265f
int crc;
int tX,tY;
volatile int timee;
u8 str[100];
volatile int st_t = 0;

        FATFS fs;
	FRESULT res;
	DIR dirs;
  	FILINFO finfo;
      //  extern  FIL file;
        FIL tile_f;
        FIL filew;

      extern   UINT nRead, nWritten;


uint16_t DR2_test;
extern uint32_t Freq;


int main(void)
{
  int xpos,ypos,ystep, yspace;
  HAL_Init();
  board_init();
  HAL_Delay(1000);
  
  char data[50];
  //ToDo:
  
  /*
  while(!psim_ok) 
  {
  HAL_UART_Transmit(&huart2,(uint8_t*)data,sprintf(data,"$PSIMPPS,W,4,100,0*36\r\n"),100);
  HAL_Delay(500);
  psim_count++;
  if (psim_count>10) 
  { 
  psim_fail=1;
  sprintf((char *)TempStr, "Fail to set 1PPS...");
  GUI_DispStringAt((char *)TempStr,300, 50);
  HAL_Delay(2000);
  NVIC_SystemReset();
}    
}
  */
  
  
  //Erase_Log();
  
  adr_log = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_ADR); // читаем адрес куда писать
  records = adr_log/256;
  Read_Log();
  if (W25qxx_Init() != 1) Error_Handler();
  
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2) need_set_time_date = 1;
  
  //  RTC_BKP_DR2 = ((FLAG[15] 0 0 0 CALP_FL[11] 0 0 CALM[8:0])
  uint16_t DR2 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR2);
  
  if (DR2 !=0x0000) 
  {   
    CALM = (uint16_t)(DR2 & 0x01FF);
    if ((uint16_t)(DR2 & 0x0800)) { CALP = RTC_SMOOTHCALIB_PLUSPULSES_SET; } 
    else { CALP = RTC_SMOOTHCALIB_PLUSPULSES_RESET; }
    HAL_RTCEx_SetSmoothCalib(&RtcHandle, RTC_SMOOTHCALIB_PERIOD_32SEC, CALP, CALM); 
    rtc_calib_ok=1;
    
    int Frtc = (0x100000 - CALM)/32; 
    if (CALP == RTC_SMOOTHCALIB_PLUSPULSES_SET) Frtc = (0x100000 - CALM - 512)/32;
    // sprintf((char *)TempStr, "Quartz calib not need. Frtc = %d",Frtc);
    // GUI_DispStringAt((char *)TempStr,10, 460);   
  }
  else 
  {
    rtc_calib_ok=0;
  }
  
  need_set_time_date = 1;
  
  while (1)
  {
    xpos=300;
    ypos = 20;
    ystep = 28;
    yspace = 90;
    GUI_DrawBitmap       (&bmwire_gps, 100, 30);
    GUI_DrawBitmap       (&bmGPS_WIFI, 100, 140);
    GUI_DrawBitmap       (&bmgps_icon, 100, 280); 
    GUI_DrawBitmap       (&bmclock_icon, 100, 380);
    
    
    if (!alarm_set)
    {
      if (need_set_time_date == 0 && rtc_calib_ok == 1)
      {
        HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
        HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
        current_ttime = rtc_to_timestamp(&sdatestructureget, &stimestructureget);
        RTC_AlarmConfig((time_t)(current_ttime + T));
        alarm_set = 1;
      }
    }
    

    
    if (timeout_1==2000) { date_set = 0; }
    if (timeout_2==2000) { date_set2 = 0; }
    if (timeout_wifi==2000) { wifi_valid_data = 0; }
    
    if (show_time_flag) // возможно вывод на экран мешает калибровке, нужно проверить
    {
      if(date_set2)
      {
        if (need_set_time_date)
        {
          
          synchro_rtc = 1;
          RTC_CalendarConfig();
          need_set_time_date = 0;
        }
        if (rtc_calib_ok == 0 && need_rtc_calib == 0) need_rtc_calib=1; // это будет правильно если после калибровки ставить битик в качестве флага
      }
      
ypos = (10);    
//GPS ext

      struct tm *out = localtime(&gps_t2); out->tm_mon+=1; 
      out->tm_year= (gps_time2.tm_year<55)?out->tm_year-100:out->tm_year;// ??  
      if (date_set2)
      {  
        GUI_SetFont(&GUI_FontVerdana32);
      sprintf(TempStr," %02d ",  out->tm_mday);//      Дата
      sprintf(data,"%c%c%c",  MonthNames[((out->tm_mon-1) * 3)], MonthNames[((out->tm_mon-1) * 3)+1],MonthNames[((out->tm_mon-1) * 3)+2]);   //   Месяц
      strcat(TempStr,data);
      sprintf(data," %d ",  out->tm_year+2000);                                                                                                                                                                                                                                                //   Год
      strcat(TempStr,data);
      sprintf((char *)data, WeekDayNames[DayOfWeek(out->tm_year, out->tm_mon,out->tm_mday)]);    //      День недели
      strcat(TempStr,data);
      GUI_DispStringAt((char *)TempStr,xpos, ypos);
      GUI_SetFont(&GUI_FontVerdana71);
      sprintf((char *)TempStr, "%02d:%02d", out->tm_hour , out->tm_min);
      GUI_DispStringAt((char *)TempStr,xpos, ypos+=ystep);
      GUI_SetFont(&GUI_FontVerdana32);
      sprintf((char *)TempStr,"%02d",out->tm_sec);
      GUI_DispStringAt((char *)TempStr,xpos+180, ypos+7);
      }
      else 
      {
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("                ",xpos, ypos);
        GUI_SetFont(&GUI_FontVerdana71);
        //sprintf((char *)TempStr, "--:--");
        GUI_DispStringAt("--:--",xpos, ypos+=ystep); 
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("--",xpos+180, ypos+7);
      }        
ypos+=yspace;      
// Wf-Fi
      out = localtime(&wifi_t); out->tm_mon+=1; 
      out->tm_year= (wifi_time.tm_year<55)?out->tm_year-100:out->tm_year;// ??        
         
      if (wifi_valid_data)
      {
      GUI_SetFont(&GUI_FontVerdana32);
      sprintf(TempStr," %02d ",  out->tm_mday);//      Дата
      sprintf(data,"%c%c%c",  MonthNames[((out->tm_mon-1) * 3)], MonthNames[((out->tm_mon-1) * 3)+1],MonthNames[((out->tm_mon-1) * 3)+2]);   //   Месяц
      strcat(TempStr,data);
      sprintf(data," %d ",  out->tm_year+2000);                                                                                                                                                                                                                                                //   Год
      strcat(TempStr,data);
      sprintf((char *)data, WeekDayNames[DayOfWeek(out->tm_year, out->tm_mon,out->tm_mday)]);    //      День недели
      strcat(TempStr,data);
      GUI_DispStringAt((char *)TempStr,xpos, ypos);
      GUI_SetFont(&GUI_FontVerdana71);
      sprintf((char *)TempStr, "%02d:%02d", out->tm_hour , out->tm_min);
      GUI_DispStringAt((char *)TempStr,xpos, ypos+=ystep);
      GUI_SetFont(&GUI_FontVerdana32);
      sprintf((char *)TempStr,"%02d",out->tm_sec);
      GUI_DispStringAt((char *)TempStr,xpos+180, ypos+7);
      sprintf((char *)TempStr,"%6d ms      ",delta_wifi*1000 + wifi_delay);
      GUI_DispStringAt((char *)TempStr,xpos+250, ypos+7);
      }
      else
      {
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("                ",xpos, ypos);
        GUI_SetFont(&GUI_FontVerdana71);
        //sprintf((char *)TempStr, "--:--");
        GUI_DispStringAt("--:--",xpos, ypos+=ystep); 
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("--",xpos+180, ypos+7);        
      }
      ypos+=yspace;      
// GPS int     
      
      out = localtime(&gps_t); out->tm_mon+=1; 
      out->tm_year= (gps_time.tm_year<55)?out->tm_year-100:out->tm_year;// ??       

      GUI_SetFont(&GUI_FontVerdana32);           
      if (time_set && date_set)
      {
      sprintf(TempStr," %02d ",  out->tm_mday);//      Дата
      sprintf(data,"%c%c%c",  MonthNames[((out->tm_mon-1) * 3)], MonthNames[((out->tm_mon-1) * 3)+1],MonthNames[((out->tm_mon-1) * 3)+2]);   //   Месяц
      strcat(TempStr,data);
      sprintf(data," %d ",  out->tm_year+2000);                                                                                                                                                                                                                                                //   Год
      strcat(TempStr,data);
      sprintf((char *)data, WeekDayNames[DayOfWeek(out->tm_year, out->tm_mon,out->tm_mday)]);    //      День недели
      strcat(TempStr,data);
      GUI_DispStringAt((char *)TempStr,xpos, ypos);
      GUI_SetFont(&GUI_FontVerdana71);
      sprintf((char *)TempStr, "%02d:%02d", out->tm_hour , out->tm_min);
      GUI_DispStringAt((char *)TempStr,xpos, ypos+=ystep); 
      GUI_SetFont(&GUI_FontVerdana32);
      sprintf((char *)TempStr,"%02d",out->tm_sec);
      GUI_DispStringAt((char *)TempStr,xpos+180, ypos+7);
      }
      else 
      {
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("                ",xpos, ypos);
        GUI_SetFont(&GUI_FontVerdana71);
        //sprintf((char *)TempStr, "--:--");
        GUI_DispStringAt("--:--",xpos, ypos+=ystep); 
        GUI_SetFont(&GUI_FontVerdana32);
        GUI_DispStringAt("--",xpos+180, ypos+7);
      }
    
      ypos+=yspace;
    
//RTC     
      GUI_SetFont(&GUI_FontVerdana32);
      //sprintf((char *)TempStr, "14 май 2020 чт ");
      sprintf(TempStr," %02d ",  sdatestructureget.Date);//      Дата
      sprintf(data,"%c%c%c",  MonthNames[((sdatestructureget.Month-1) * 3)], MonthNames[((sdatestructureget.Month-1) * 3)+1],MonthNames[((sdatestructureget.Month-1) * 3)+2]);   //   Месяц
      strcat(TempStr,data);
      sprintf(data," %d ",  sdatestructureget.Year+2000);                                                                                                                                                                                                                                                //   Год
      strcat(TempStr,data);
      sprintf((char *)data, WeekDayNames[DayOfWeek(sdatestructureget.Year, sdatestructureget.Month,sdatestructureget.Date)]);    //      День недели
      strcat(TempStr,data);
      
      GUI_DispStringAt((char *)TempStr,xpos, ypos);
      GUI_SetFont(&GUI_FontVerdana71);
      sprintf((char *)TempStr, "%02d:%02d", stimestructureget.Hours , stimestructureget.Minutes);
      GUI_DispStringAt((char *)TempStr,xpos, ypos+=ystep);
      GUI_SetFont(&GUI_FontVerdana32);
      sprintf((char *)TempStr, "%02d",stimestructureget.Seconds);
      GUI_DispStringAt((char *)TempStr,xpos+180, ypos+7);
      
      if (date_set2)
      {
      sprintf((char *)TempStr, "%6d ms      ", delta*1000 + delta_ms);
      GUI_DispStringAt((char *)TempStr,xpos+250, ypos+7);
      }
      else
      {
      sprintf((char *)TempStr, "            ");
      GUI_DispStringAt((char *)TempStr,xpos+250, ypos+7); 
      }
      //-------------------------------------------
      
      sprintf((char *)TempStr, "rtc: %d", current_ttime);
      GUI_DispStringAt((char *)TempStr,xpos+250, 20);
      
      sprintf((char *)TempStr, "gps: %d", gps_t2);
      GUI_DispStringAt((char *)TempStr,xpos+250, 50);   
      
    //  sprintf((char *)TempStr, "d: %d sec %d ms      ", delta, delta_ms);
    //  GUI_DispStringAt((char *)TempStr,xpos+250, 80);       
      
      if (log_flag ==1)
      {
        Write_Log(adr_log);
        adr_log+=256;
        HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_ADR,adr_log);
        log_flag = 0;
      }
      show_time_flag=0;
    }
    
    
    
  }
  
}







